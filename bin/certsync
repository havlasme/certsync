#!/bin/bash

set -o errexit
set -o nounset
shopt -s nullglob

CERTSYNC_VERSION="1.0.1"

function _certsync_hook_deploy() {
    local domain="$1"; shift

    for hook in "/etc/certsync/sync-hook/deploy/"*; do
        "${hook}" "${domain}"
    done
}

function _certsync_help() {
    cat >&2 <<EOHELP
Usage: $(basename "$0") COMMAND [DOMAIN]

Synchronize SSL certificate, and private key with centralized repository.

Command:
  init DOMAIN        initialize certificate synchronization setup
  restrict DOMAIN    print remote restricted ssh key configuration
  sync DOMAIN        run certificate synchronization
EOHELP

    exit 1
}

function _certsync_accept() {
    local message="$1"; shift
    local accept

    read -rp "${message} (yes/no): " accept
    [[ "${accept}" =~ ^[Yy]([Ee][Ss])?$ ]]
}

function _certsync_main() {
    local command="$1"; shift

    case "${command}" in
    init)
        local domain="$1"; shift
        local CERTSYNC_HOST CERTSYNC_USERNAME CERTSYNC_SSHKEY CERTSYNC_NETHOOK_TOKEN

        if [[ -f "/etc/certsync/sync/${domain}" ]] || [[ -d "/etc/certsync/private/${domain}" ]]; then
            >&2 echo "domain (${domain}) configuration already exist"
            exit 1
        fi

        read -rp "Host: " CERTSYNC_HOST
        read -rp "Username: " CERTSYNC_USERNAME
        CERTSYNC_SSHKEY="/etc/certsync/private/${domain}/ssh_key"
        CERTSYNC_NETHOOK_TOKEN="$(openssl rand -hex 16)"

        echo "CERTSYNC_HOST=${CERTSYNC_HOST}"
        echo "CERTSYNC_USERNAME=${CERTSYNC_USERNAME}"
        echo "CERTSYNC_SSHKEY=${CERTSYNC_SSHKEY}"
        echo "CERTSYNC_NETHOOK_TOKEN=${CERTSYNC_NETHOOK_TOKEN}"

        _certsync_accept "Save synchronization configuration?" || exit 1

        mkdir "/etc/certsync/private/${domain}"
        ssh-keygen -q -t ecdsa -f "${CERTSYNC_SSHKEY}" -N "" -C ""

        echo "CERTSYNC_HOST=${CERTSYNC_HOST}" > "/etc/certsync/sync/${domain}"
        echo "CERTSYNC_USERNAME=${CERTSYNC_USERNAME}" >> "/etc/certsync/sync/${domain}"
        echo "CERTSYNC_SSHKEY=${CERTSYNC_SSHKEY}" >> "/etc/certsync/sync/${domain}"
        chmod 0640 "/etc/certsync/sync/${domain}"
        echo "CERTSYNC_NETHOOK_TOKEN=${CERTSYNC_NETHOOK_TOKEN}" >> "/etc/certsync/sync/${domain}"

        mkdir "/etc/certsync/live/${domain}"

        _certsync_main restrict "${domain}"
        ;;

    restrict)
        local domain="$1"; shift

        if [[ ! -f "/etc/certsync/sync/${domain}" ]]; then
            >&2 echo "domain (${domain}) configuration does not exist"
            exit 1
        fi

        readarray -t CERTSYNC < <( env -i "$(grep -v -E '^#|^\s*$' "/etc/certsync/sync/${domain}")" )
        declare "${CERTSYNC[@]}"

        if [[ ! -f "${CERTSYNC_SSHKEY}.pub" ]]; then
            >&2 echo "domain (${domain}) public ssh key not present"
            exit 1
        fi

        echo -n "command=\"/usr/local/libexec/certsync-restrict ${domain}\" "
        cat "${CERTSYNC_SSHKEY}.pub"
        ;;

    sync)
        local domain="$1"; shift

        if [[ ! -f "/etc/certsync/sync/${domain}" ]]; then
            >&2 echo "domain (${domain}) configuration does not exist"
            exit 1
        fi

        readarray -t CERTSYNC < <( env -i "$(grep -v -E '^#|^\s*$' "/etc/certsync/sync/${domain}")" )
        declare "${CERTSYNC[@]}"

        rsync -Lprte "ssh -i ${CERTSYNC_SSHKEY} -l ${CERTSYNC_USERNAME}" "${CERTSYNC_HOST}:${domain}/" "/etc/certsync/live/${domain}/"
        _certsync_hook_deploy "${domain}"
        ;;

    -h | --help)
        _certsync_help
        ;;

    -v | --version)
        echo $CERTSYNC_VERSION
        ;;

    *)
        >&2 echo "unknown command"
        exit 1
        ;;
    esac
}

[[ $# -eq 0 ]] && _certsync_help
_certsync_main "$@"
